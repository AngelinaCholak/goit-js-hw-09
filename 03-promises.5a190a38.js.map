{"mappings":"YA8CA,SAASA,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAKPQ,SAASC,cAAc,SAASC,iBAAiB,UAAU,SAAUC,GACnEA,EAAEC,iBAOF,IALiD,IAA3CC,EAAQC,SAASN,SAASC,cAAc,sBAAsBM,OAC9DC,EAAOF,SAASN,SAASC,cAAc,qBAAqBM,OAC5DE,EAASH,SAASN,SAASC,cAAc,uBAAuBM,OAG7DG,EAAI,EAAGA,GAAKD,EAAQC,IAAK,CAEhCpB,EADiBoB,EACOL,GAASK,EAAI,GAAKF,GACvCG,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACjBqB,QAAQC,IAAI,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAE3DwB,OAAM,SAAAJ,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MAClBqB,QAAQC,IAAI,sBAAqCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAG5DyB,KAAKC,O","sources":["src/js/03-promises.js"],"sourcesContent":["// // Імпорт бібліотеки Notiflix\n// const Notiflix = require('notiflix');\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       const shouldResolve = Math.random() > 0.3;\n//       if (shouldResolve) {\n//         resolve({ position, delay });\n//       } else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n// }\n\n// const delayEl = document.querySelector('input[name=\"delay\"]');\n// const stepEl = document.querySelector('input[name=\"step\"]');\n// const amountEl = document.querySelector('input[name=\"amount\"]');\n// const form = document.querySelector('.form');\n\n// function promiseSubmit(event) {\n//   event.preventDefault();\n//   const results = [];\n//   let delay = parseInt(delayEl.value);\n\n//   for (let i = 1; i <= parseInt(amountEl.value); i++) {\n//     const promise = createPromise(i, delay);\n//     results.push(promise);\n//     delay += parseInt(stepEl.value);\n//   }\n\n//   Promise.all(results)\n//     .then((resolvedPromises) => {\n//       resolvedPromises.forEach(({ position, delay }) => {\n        \n//         Notiflix.Notify.Success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       });\n//     })\n//     .catch((error) => {\n      \n//       Notiflix.Notify.Failure(`❌ Rejected promise ${error.position} in ${error.delay}ms`);\n//     });\n// }\n\n// form.addEventListener('submit', promiseSubmit);\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n\ndocument.querySelector('.form').addEventListener('submit', function (e) {\n  e.preventDefault(); // Предотвращаем перезагрузку страницы при отправке формы\n\n  const delay = parseInt(document.querySelector('input[name=\"delay\"').value);\n  const step = parseInt(document.querySelector('input[name=\"step\"').value);\n  const amount = parseInt(document.querySelector('input[name=\"amount\"').value);\n\n  \n  for (let i = 1; i <= amount; i++) {\n    const position = i;\n    createPromise(position, delay + (i - 1) * step)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n   this.reset();\n});"],"names":["$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","e","preventDefault","delay1","parseInt","value","step","amount","i","then","param","console","log","concat","catch","this","reset"],"version":3,"file":"03-promises.5a190a38.js.map"}